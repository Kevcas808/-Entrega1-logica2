package Tem;
import javax.swing.*;
import java.awt.*;

public class App extends JPanel {       // JPanel lista circular

    private ListaCircular lista;
    private Nodo actual1, actual2;  // Two nodes for two squares
    private Timer timer;

    public App() {
        lista = new ListaCircular();
        generarTrayectoriaCircular(200, 200, 100, 30);  // Create a circular path
        actual1 = lista.getCabeza();  // First square
        actual2 = actual1.siguiente; // Second square (next node)

        // Timer to move the squares
        timer = new Timer(100, e -> {
            actual1 = actual1.siguiente;
            actual2 = actual2.siguiente;
            repaint();
        });
        timer.start();
    }

    public void generarTrayectoriaCircular(int centroX, int centroY, int radio, int puntos) {
        double anguloIncremento = 2 * Math.PI / puntos;
        for (int i = 0; i < puntos; i++) {
            int x = (int) (centroX + radio * Math.cos(i * anguloIncremento));
            int y = (int) (centroY + radio * Math.sin(i * anguloIncremento));
            lista.insertar(x, y);
        }
    }

    protected void paintComponent(Graphics g) {     // Graphics part, model
        super.paintComponent(g);
        
        // Draw the first square (Gray)
        g.setColor(Color.GRAY);
        g.fillRect(actual1.x - 10, actual1.y - 10, 30, 30);
        
        // Draw the second square (Blue)
        g.setColor(Color.BLUE);
        g.fillRect(actual2.x - 10, actual2.y - 10, 30, 30);
    }

    public static void main(String[] args) throws Exception {   // Entry point
        JFrame frame = new JFrame(":AnimaciÃ³n Circular");
        App panel = new App();
        frame.add(panel);
        frame.setSize(800, 800);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}
